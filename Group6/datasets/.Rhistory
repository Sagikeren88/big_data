mse(sm)
lin.model2 = lm(df.train$price_cat ~ df.train$points)
sm2  = summary(lin.model2)
mse(sm2)
model.enhanced = lm(df.train$price ~ df.train$points + df.train$province)
sm.enhanced  = summary(model.enhanced)
mse(sm.enhanced)
RF.results = predict(Wine.RF, df.test)
#library(knitr)
knitr::opts_knit$set(root.dir = "~/Dropbox/MBA\ 2017/Data\ Analytics\ for\ Business/DataSet")
df.all <- read.csv("winemag-data_first150k.csv")
set.seed(666)
bound <- floor((nrow(df)/4)*3)
d <- df[sample(nrow(df)), ]
df.train <- d[1:bound, ]
df.test <- d[(bound+1):nrow(df), ]
library("randomForest")
set.seed(7)
Wine.RF <- randomForest(price ~ points , data = df.train)
Wine.RF
plot(Wine.RF)
importance(Wine.RF)
varImpPlot(Wine.RF)
importance(Wine.RF)
importance(Wine.RF)
plot(Wine.RF)
#library(knitr)
knitr::opts_knit$set(root.dir = "~/Dropbox/MBA\ 2017/Data\ Analytics\ for\ Business/DataSet")
df.all <- read.csv("winemag-data_first150k.csv")
dim(df.all)
table(is.na(df.all))
summary(df.all)
sapply(df.all, function(x) sum(is.na(x)))
df = na.omit(df.all)
par(mfrow=c(1,2));
hist(df$points, main="Points histogram")
hist(df$price, main="Price histogram")
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, Inf), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes")
cor(df$points, df$price_cat)
plot(df$price_cat, df$points)
abline(lm(df$points ~ df$price_cat))
set.seed(666)
bound <- floor((nrow(df)/4)*3)
d <- df[sample(nrow(df)), ]
df.train <- d[1:bound, ]
df.test <- d[(bound+1):nrow(df), ]
mse = function(sm) {
mean(sm$residuals^2)
}
rmse = function(mse){
sqrt(mse)
}
# MSE calculation function
mse = function(sm) {
mean(sm$residuals^2)
}
rmse = function(mse){
sqrt(mse)
}
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lin.model)
# MSE calculation function
mse = function(sm) {
mean(sm$residuals^2)
}
rmse = function(mse){
sqrt(mse)
}
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
lm.mse = mse(sm)
lm.rmse = rmse(lm.mse)
lm.model2 = lm(df.train$price_cat ~ df.train$points)
sm2  = summary(lm.model2)
lm.mse2 = mse(sm2)
lm.rmse2 = rmse(lm.mse2)
model.enhanced = lm(df.train$price ~ df.train$points + df.train$province)
sm.enhanced  = summary(model.enhanced)
mse(sm.enhanced)
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
lm.mse = mse(sm)
lm.rmse = rmse(lm.mse)
lm.model
lm.model2 = lm(df.train$price_cat ~ df.train$points)
sm2  = summary(lm.model2)
lm.mse2 = mse(sm2)
lm.rmse2 = rmse(lm.mse2)
lm.model2
model.enhanced = lm(df.train$price ~ df.train$points + df.train$province)
sm.enhanced  = summary(model.enhanced)
mse(sm.enhanced)
model.enhanced
mse = function(sm) {
mean(sm$residuals^2)
}
rmse = function(mse){
sqrt(mse)
}
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
lm.mse = mse(sm)
lm.rmse = rmse(lm.mse)
#library(knitr)
knitr::opts_knit$set(root.dir = "~/Dropbox/MBA\ 2017/Data\ Analytics\ for\ Business/DataSet")
df.all <- read.csv("winemag-data_first150k.csv")
dim(df.all)
table(is.na(df.all))
summary(df.all)
sapply(df.all, function(x) sum(is.na(x)))
df = na.omit(df.all)
par(mfrow=c(1,2));
hist(df$points, main="Points histogram")
hist(df$price, main="Price histogram")
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, Inf), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes")
cor(df$points, df$price_cat)
plot(df$price_cat, df$points)
abline(lm(df$points ~ df$price_cat))
install.packages("dplyr")
lm.model2 = lm(df.train$price_cat ~ df.train$points)
sm2  = summary(lm.model2)
lm.mse2 = mse(sm2)
lm.rmse2 = rmse(lm.mse2)
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
plot(df.train$price, df.train$points)
abline(lm.model)
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
plot(df.train$points, df.train$price)
abline(lm.model)
plot(lm.model)
lm.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
lm.model
.model = lm(df.train$price ~ df.train$points)
sm  = summary(lm.model)
lm.model
sm
lm.model2 = lm(df.train$price_cat ~ df.train$points)
sm2  = summary(lm.model2)
lm.model2
sm2
sm
sm2
sm
sm2
model.enhanced = lm(df.train$price ~ df.train$points + df.train$province)
sm.enhanced  = summary(model.enhanced)
sm.enhanced
sm.enhanced
install.packages("MASS",repos = "http://cran.us.r-project.org")
library(MASS)
df = na.omit(df.all)
par(mfrow=c(1,2));
hist(df$points, main="Points histogram", breaks = 10)
hist(df$price, main="Price histogram", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, Inf), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, 60), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, 100), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, 300), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, NA), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df$price_cat = cut(df$price, c(0, 10, 16, 24, 33, 40, Inf), labels = FALSE)
hist(df$price_cat, main="Price histogram by price classes", breaks = 10)
df = na.omit(df.all)
par(mfrow=c(1,3));
hist(df$points, main="Points histogram", breaks = 10)
hist(df$price, main="Price histogram", breaks = 10)
hist(log(df$price), main="Price histogram", breaks = 10)
df$price_log = log(df$price)
hist(df$price_log, main="Price histogram by price classes", breaks = 10)
cor(df$points, df$price_cat)
cor(df$points, df$price_log)
plot(df$price_log, df$points)
abline(lm(df$points ~ df$price_log))
df = na.omit(df.all)
par(mfrow=c(1,2));
hist(df$points, main="Points histogram", breaks = 10)
hist(df$price, main="Price histogram", breaks = 10)
lm.model2 = lm(df.train$price_log ~ df.train$points)
set.seed(666)
bound <- floor((nrow(df)/4)*3)
d <- df[sample(nrow(df)), ]
df.train <- d[1:bound, ]
df.test <- d[(bound+1):nrow(df), ]
lm.model2 = lm(df.train$price_log ~ df.train$points)
df$price_log = log(df$price)
View(df)
set.seed(666)
bound <- floor((nrow(df)/4)*3)
d <- df[sample(nrow(df)), ]
df.train <- d[1:bound, ]
df.test <- d[(bound+1):nrow(df), ]
lm.model2 = lm(df.train$price_log ~ df.train$points)
lm.model2
sm2  = summary(lm.model2)
lm.mse2 = mse(sm2)
lm.rmse2 = rmse(lm.mse2)
sm2
model.enhanced = lm(df.train$price_log ~ df.train$points + df.train$province)
sm.enhanced  = summary(model.enhanced)
mse(sm.enhanced)
sm.enhanced
library("tree")
Wine.CART <- tree(price ~ points ,data = df.train) # could not select all predictors since there are more than 32 levels
plot(Wine.CART)
text(Wine.CART, pretty = 0, cex=0.5)
summary(Wine.CART)
plot(lm.model2)
lm.model2 = lm(df.train$price_log ~ df.train$points + I(df.train$points^2))
plot(lm.model2)
sm2  = summary(lm.model2)
sm2
sm
sm2
sm.enhanced
lm_y_est <- predict(lm.model2, df.test)
lm_res <- lm_y_est - df.test$price_log
hist(lm_res)
<- sum(abs(res))/length(res)
L1 = sum(abs(res))/length(res)
L1 = sum(abs(lm_res))/length(lm_res)
L1
Res_sq <- lm_res^2
RSS <- sum(Res_sq)
MSE <- RSS/length(Res_sq)
RMSE <- sqrt(MSE)
RMSE
summary(Wine.CART)
CART.results = predict(Wine.CART, df.test, n.trees = 1000)
summary(CART.results)
CART.prediction = ifelse(CART.results > threshold)
CART.prediction = ifelse(CART.results > threshold,1,0)
threshold = 0.5
CART.prediction = ifelse(CART.results > threshold)
CART.prediction = ifelse(CART.results > threshold,1,0)
summary(CART.prediction)
library("randomForest")
set.seed(7)
Wine.RF <- randomForest(price ~ . , data = df.train)
set.seed(7)
Wine.RF <- randomForest(price ~ points
Wine.RF
library("randomForest")
set.seed(7)
Wine.RF <- randomForest(price ~ points , data = df.train)
Wine.RF
importance(Wine.RF)
View(df)
Wine.RF <- randomForest(price ~ points+province , data = df.train)
varImpPlot(Wine.RF)
######################
# Set output and input directories into variables to be used in the script (replace with your directories)
# Set Options
Sys.setlocale(category="LC_TIME", locale="English")
options(digits=4, max.print=1000, stringsAsFactors=FALSE, scipen=10)
##    Import Data   ##
######################
# Import data
setwd("~/source/big_data/Group6/datasets")
NS <- read.csv("KaggleV2-May-2016.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS$ScheduledDay <- as.character(NS$ScheduledDay)
NS$ScheduledDay <- as.Date(NS$ScheduledDay, format="%Y-%m-%d")
# Format appointment date
NS$AppointmentDay <- as.character(NS$AppointmentDay)
NS$AppointmentDay <- as.Date(NS$AppointmentDay, format="%Y-%m-%d")
# Create week day column
NS$week_day <- as.POSIXlt(NS$AppointmentDay)$wday
# Create numeric no show column
NS[!(NS$No.show== "No"), "numeric_no_show"] <- 0
NS[!(NS$No.show== "Yes"), "numeric_no_show"] <- 1
NS$numeric_no_show <- as.integer(NS$numeric_no_show)
# Create numeric gender column
NS[!(NS$Gender== "F"), "is_female"] <- 1
NS[!(NS$Gender== "M"), "is_female"] <- 0
NS$is_female <- as.integer(NS$is_female)
# Create waiting time column
NS$waiting_time <- difftime(NS$AppointmentDay, NS$ScheduledDay, units = "days")
NS$waiting_time <- as.integer(NS$waiting_time)
# Create appointment counts
APPOINTMENT_COUNTS <- read.csv("APPOINTMENT_COUNTS.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- cbind(NS,APPOINTMENT_COUNTS)
# Add geodata
GEODATA <- read.csv("geodata.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- merge(NS, GEODATA, all.x = TRUE, all.y = FALSE)
View(NS)
######################
#  General Settings  #
######################
# Set output and input directories into variables to be used in the script (replace with your directories)
# Set Options
Sys.setlocale(category="LC_TIME", locale="English")
options(digits=4, max.print=1000, stringsAsFactors=FALSE, scipen=10)
######################
##    Import Data   ##
######################
# Import data
setwd("~/source/big_data/Group6/datasets")
NS <- read.csv("KaggleV2-May-2016.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
######################
##    Format Data   ##
######################
# Format schedule date
NS$ScheduledDay <- as.character(NS$ScheduledDay)
NS$ScheduledDay <- as.Date(NS$ScheduledDay, format="%Y-%m-%d")
# Format appointment date
NS$AppointmentDay <- as.character(NS$AppointmentDay)
NS$AppointmentDay <- as.Date(NS$AppointmentDay, format="%Y-%m-%d")
# Create week day column
NS$week_day <- as.POSIXlt(NS$AppointmentDay)$wday
# Create numeric no show column
NS[!(NS$No.show== "No"), "numeric_no_show"] <- 0
NS[!(NS$No.show== "Yes"), "numeric_no_show"] <- 1
NS$numeric_no_show <- as.integer(NS$numeric_no_show)
# Create numeric gender column
NS[!(NS$Gender== "F"), "is_female"] <- 1
NS[!(NS$Gender== "M"), "is_female"] <- 0
NS$is_female <- as.integer(NS$is_female)
# Create waiting time column
NS$waiting_time <- difftime(NS$AppointmentDay, NS$ScheduledDay, units = "days")
NS$waiting_time <- as.integer(NS$waiting_time)
# Create appointment counts
APPOINTMENT_COUNTS <- read.csv("APPOINTMENT_COUNTS.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- cbind(NS,APPOINTMENT_COUNTS)
View(APPOINTMENT_COUNTS)
NS <- cbind(NS,APPOINTMENT_COUNTS[1:6])
View(NS)
######################
#  General Settings  #
######################
# Set output and input directories into variables to be used in the script (replace with your directories)
# Set Options
Sys.setlocale(category="LC_TIME", locale="English")
options(digits=4, max.print=1000, stringsAsFactors=FALSE, scipen=10)
######################
##    Import Data   ##
######################
# Import data
setwd("~/source/big_data/Group6/datasets")
NS <- read.csv("KaggleV2-May-2016.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
######################
##    Format Data   ##
######################
# Format schedule date
NS$ScheduledDay <- as.character(NS$ScheduledDay)
NS$ScheduledDay <- as.Date(NS$ScheduledDay, format="%Y-%m-%d")
# Format appointment date
NS$AppointmentDay <- as.character(NS$AppointmentDay)
NS$AppointmentDay <- as.Date(NS$AppointmentDay, format="%Y-%m-%d")
# Create week day column
NS$week_day <- as.POSIXlt(NS$AppointmentDay)$wday
# Create numeric no show column
NS[!(NS$No.show== "No"), "numeric_no_show"] <- 0
NS[!(NS$No.show== "Yes"), "numeric_no_show"] <- 1
NS$numeric_no_show <- as.integer(NS$numeric_no_show)
# Create numeric gender column
NS[!(NS$Gender== "F"), "is_female"] <- 1
NS[!(NS$Gender== "M"), "is_female"] <- 0
NS$is_female <- as.integer(NS$is_female)
# Create waiting time column
NS$waiting_time <- difftime(NS$AppointmentDay, NS$ScheduledDay, units = "days")
NS$waiting_time <- as.integer(NS$waiting_time)
# Create appointment counts
APPOINTMENT_COUNTS <- read.csv("APPOINTMENT_COUNTS.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- cbind(NS,APPOINTMENT_COUNTS[1:6])
View(NS)
View(NS)
NS <- cbind(NS,APPOINTMENT_COUNTS[,c(1:6)])
######################
#  General Settings  #
######################
# Set output and input directories into variables to be used in the script (replace with your directories)
# Set Options
Sys.setlocale(category="LC_TIME", locale="English")
options(digits=4, max.print=1000, stringsAsFactors=FALSE, scipen=10)
######################
##    Import Data   ##
######################
# Import data
setwd("~/source/big_data/Group6/datasets")
NS <- read.csv("KaggleV2-May-2016.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
######################
##    Format Data   ##
######################
# Format schedule date
NS$ScheduledDay <- as.character(NS$ScheduledDay)
NS$ScheduledDay <- as.Date(NS$ScheduledDay, format="%Y-%m-%d")
# Format appointment date
NS$AppointmentDay <- as.character(NS$AppointmentDay)
NS$AppointmentDay <- as.Date(NS$AppointmentDay, format="%Y-%m-%d")
# Create week day column
NS$week_day <- as.POSIXlt(NS$AppointmentDay)$wday
# Create numeric no show column
NS[!(NS$No.show== "No"), "numeric_no_show"] <- 0
NS[!(NS$No.show== "Yes"), "numeric_no_show"] <- 1
NS$numeric_no_show <- as.integer(NS$numeric_no_show)
# Create numeric gender column
NS[!(NS$Gender== "F"), "is_female"] <- 1
NS[!(NS$Gender== "M"), "is_female"] <- 0
NS$is_female <- as.integer(NS$is_female)
# Create waiting time column
NS$waiting_time <- difftime(NS$AppointmentDay, NS$ScheduledDay, units = "days")
NS$waiting_time <- as.integer(NS$waiting_time)
# Create appointment counts
APPOINTMENT_COUNTS <- read.csv("APPOINTMENT_COUNTS.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- cbind(NS,APPOINTMENT_COUNTS[,c(1:6)])
View(NS)
######################
#  General Settings  #
######################
# Set output and input directories into variables to be used in the script (replace with your directories)
# Set Options
Sys.setlocale(category="LC_TIME", locale="English")
options(digits=4, max.print=1000, stringsAsFactors=FALSE, scipen=10)
######################
##    Import Data   ##
######################
# Import data
setwd("~/source/big_data/Group6/datasets")
NS <- read.csv("KaggleV2-May-2016.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
######################
##    Format Data   ##
######################
# Format schedule date
NS$ScheduledDay <- as.character(NS$ScheduledDay)
NS$ScheduledDay <- as.Date(NS$ScheduledDay, format="%Y-%m-%d")
# Format appointment date
NS$AppointmentDay <- as.character(NS$AppointmentDay)
NS$AppointmentDay <- as.Date(NS$AppointmentDay, format="%Y-%m-%d")
# Create week day column
NS$week_day <- as.POSIXlt(NS$AppointmentDay)$wday
# Create numeric no show column
NS[!(NS$No.show== "No"), "numeric_no_show"] <- 0
NS[!(NS$No.show== "Yes"), "numeric_no_show"] <- 1
NS$numeric_no_show <- as.integer(NS$numeric_no_show)
# Create numeric gender column
NS[!(NS$Gender== "F"), "is_female"] <- 1
NS[!(NS$Gender== "M"), "is_female"] <- 0
NS$is_female <- as.integer(NS$is_female)
# Create waiting time column
NS$waiting_time <- difftime(NS$AppointmentDay, NS$ScheduledDay, units = "days")
NS$waiting_time <- as.integer(NS$waiting_time)
# Create appointment counts
APPOINTMENT_COUNTS <- read.csv("APPOINTMENT_COUNTS.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- cbind(NS,APPOINTMENT_COUNTS)
GEODATA <- read.csv("geodata.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- merge(NS, GEODATA, by="Neighbourhood", all.x = TRUE, all.y = FALSE)
NS <- merge(NS, GEODATA, by="Neighbourhood", all.x = TRUE, all.y = TRUE)
View(GEODATA)
NS <- merge(NS, GEODATA, by="neighbourhood", all.x = TRUE, all.y = TRUE)
View(NS)
GEODATA <- read.csv("geodata.csv", header = TRUE, as.is =  TRUE, na.strings = c("NA",".",""))
NS <- merge(NS, GEODATA, by.x = "Neighbourhood", by.y = "Original", all.x = TRUE, all.y = TRUE)
View(NS)
summary(NS)
str(NS)
# Check for missing values
sapply(NS, function(x) sum(is.na(x)))
# Check age range
range(NS$Age)
# Remove negative age
NS_CLEAN <- NS[NS$Age>=0,]
#Check waiting time range
range(NS$waiting_time)
# Remove Negative Waiting TIme
NS_CLEAN<-NS_CLEAN[NS_CLEAN$waiting_time>=0,]
# Check for duplicated rows
dup_rows <- duplicated(NS_CLEAN)
sum(dup_rows)
summary(NS_CLEAN)
str(NS_CLEAN)
# Leave required fields only and rename column consistently
NS_CLEAN <- data.frame(NS_CLEAN$PatientId
, NS_CLEAN$AppointmentID
, NS_CLEAN$week_day
, NS_CLEAN$ScheduledDay
, NS_CLEAN$AppointmentDay
, NS_CLEAN$waiting_time
, NS_CLEAN$Age
, NS_CLEAN$is_female
, NS_CLEAN$Scholarship
, NS_CLEAN$Neighbourhood
, NS_CLEAN$Hipertension
, NS_CLEAN$Diabetes
, NS_CLEAN$Alcoholism
, NS_CLEAN$Handcap
, NS_CLEAN$SMS_received
, NS_CLEAN$numeric_no_show
)
names(NS_CLEAN) <- c("patient_id","appointment","week_day","schedule_date","appointmnet_date","waiting_time"
,"age","is_female","scholarship","neighbourhood","hipertension","diabetes","alcoholism"
,"handcap","sms_recieved","no_show")
write.csv(NS_CLEAN, file="NS_CLEAN.csv", quote=FALSE, na="NA", row.names=FALSE)
#In order to repeat a random selection in the first place select the seed - this way each time you select the same seed, the random selection will be the same.
set.seed(666)
# set train size to 80%
total <- nrow(NS_CLEAN)
bound <- floor((total/5)*4)
# scramle the data using sample function
D <- NS_CLEAN[sample(total), ]
# split the data to tetst and train
NS.TRAIN <- D[1:bound, ]
NS.TEST <- D[(bound+1):total, ]
write.csv(NS.TRAIN, file="NS.TRAIN.csv", quote=FALSE, na="NA", row.names=FALSE)
write.csv(NS.TEST, file="NS.TEST.csv", quote=FALSE, na="NA", row.names=FALSE)
